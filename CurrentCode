// hangman game 
// Cassie, Oresti, Julia, Adam 
// NEED: different levels. all graphics. larger word bank. main menu / top scores (with names).

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <ctime>
#include <cctype>

using namespace std;

string THEWORD;            // word to guess
int wrong;
string soFar;
string used;

bool match(char letter, string word);
char askGuess(string usedLettersStr); //tells the compiler of method askGuess
bool playAgain();

int main()
{
	srand(time(0));

	vector<string> words;  // collection of possible words to guess
	words.push_back("RANDOM");
	words.push_back("ORANGE");
	words.push_back("UNICORN");
	words.push_back("NOTE");
	words.push_back("THESIS");
	words.push_back("ORIGINAL");

	cout << "Welcome to Hangman. Have Fun!!\n";

	// loop starts here
	bool done = false;
	do
	{
		const int MAX_WRONG = 8;  // maximum number of incorrect guesses allowed

		random_shuffle(words.begin(), words.end());
		THEWORD = words[0];            // word to guess

		sofar = string(THEWORD.size(), '-');          // word guessed so far
		used = "";                            // letters already guessed

		// loop for current word
		while ((wrong < MAX_WRONG) && (sofar != THEWORD))
		{
			cout << "\n\nYou have " << (MAX_WRONG - wrong) << " incorrect guesses left.\n";
			cout << "\nYou've used the following letters:\n" << used << endl;
			cout << "\nSo far, the word is:\n" << sofar << endl;

			used += askGuess(used);



		} // end of while ((wrong < MAX_WRONG) && (sofar != THEWORD))

		// shut down
		if (wrong == MAX_WRONG)
		{
			cout << "\nYou've been hanged!";
		}

		cout << "\nThe word was " << THEWORD << endl;

	} while (playAgain());

	return 0;
}

inline bool match(char letter, string word)
{
	return (word.find(letter) != string::npos);
}

char askGuess(string usedLettersStr)
{
	char guess;
	cout << "\n\nEnter your guess: ";
	cin >> guess;
	guess = toupper(guess); //make uppercase since secret word in uppercase
	//        while (used.find(guess) != string::npos)
	while (match(guess, used))
	{
		cout << "\nYou've already guessed " << guess << endl;
		cout << "Enter your guess: ";
		cin >> guess;
		guess = toupper(guess);
	}


	//        if (THEWORD.find(guess) != string::npos)
	if (match(guess, THEWORD))
	{
		cout << "That's right! " << guess << " is in the word.\n";

		// update sofar to include newly guessed letter
		for (int i = 0; i < THEWORD.length(); i++)
			if (THEWORD[i] == guess)
				sofar[i] = guess;
	}
	
	 else
	{
		cout << "Sorry, " << guess << " isn't in the word.\n";
		++wrong;
	}
	return guess;
}



bool playAgain() // function to play again while clearing system
{
	char again;
	cout << "\n\nWould you like to play again? <y/n>: ";
	cin >> again;

	cin.clear(); //clear and ignore cin
	cin.ignore();

	again = toupper(again);

	

	return (again == 'Y');
}
